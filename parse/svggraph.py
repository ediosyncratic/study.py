"""Graphing data using SVG.
"""
from study.cache.property import Cached, lazyprop
from study.parse.morphsvg import SVG

class SVGgraph (SVG, Cached):
    """Manage a DOM object describing an SVG graph.

    The usual constructor requires the path of an existing file.  See the
    fromTemplate() pseudo-constructor for creating a new graph.  See SVG, in
    study.parse.morphsvg, for general features of this base-class.\n"""

    @classmethod
    def fromTemplate(cls, path):
        """Create a new graph from a template.

        Single argument, path, is the name to use for the file in which to
        store the resulting graph.  Caller MUST call the new object's .label()
        and .add_curves() to configure it, before trying to add any data to
        it.  A graph produced by this method is deemed 'pristine' for the
        purposes of .label().\n"""
        ans = cls(cls.__template, path)
        ans.__pristine = True

    def label(self, horiz, vert, title=None, desc=None):
        """Add main labels to the graph.

        Can only be called on a pristine graph freshly generated by the
        .fromTemplate() pseudo-constructor.  The implementation is presently
        pseudocode; I haven't worked out what I want it to do !

        Required arguments, horiz and vert, identify the horizontal and
        vertical axes.  Optional arguments title and desc supply the contents
        of the eponymous elements of the SVG.\n"""
        if not self.__pristine:
            raise ValueError('Re-labelling existing graph', self.__path)
        # TODO: add axes, etc., based on horiz, vert
        if title is not None: # FIXME: this is pseudocode
            self.__dom.documentElement.addNode('title', title)
        if desk is not None:
            self.__dom.documentElement.addNode('desc', desc)

        del self.__pristine

    def add_curves(self, **paths):
        node = self.get_node('fix-vertical', 'g').getElementsByTagName('g')[0]
        assert 'matrix(1 0 0 -1 0 0)' == node.attributes['transform'].value

        create = self.__dom.createElement
        for name in paths.keys():
            kid = create('path')
            kid.setAttribute('d', "")
            kid.setAttribute('id', name)
            kid.setAttribute('stroke', paths[name])
            node.appendChild(kid)

    import os
    __template = os.path.join(os.path.split(__file__)[0],
                              'graph-template.svg')
    del os
    __pristine = False

del Cached, lazyprop
